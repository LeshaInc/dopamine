/*
 * This file is generated by jOOQ.
 */
package ru.sigsegv.dopamine.generated.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.sigsegv.dopamine.generated.Keys;
import ru.sigsegv.dopamine.generated.Public;
import ru.sigsegv.dopamine.generated.tables.records.StudyGroupRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudyGroup extends TableImpl<StudyGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.study_group</code>
     */
    public static final StudyGroup STUDY_GROUP = new StudyGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudyGroupRecord> getRecordType() {
        return StudyGroupRecord.class;
    }

    /**
     * The column <code>public.study_group.id</code>.
     */
    public final TableField<StudyGroupRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.study_group.name</code>.
     */
    public final TableField<StudyGroupRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.study_group.grade</code>.
     */
    public final TableField<StudyGroupRecord, Integer> GRADE = createField(DSL.name("grade"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.study_group.faculty</code>.
     */
    public final TableField<StudyGroupRecord, String> FACULTY = createField(DSL.name("faculty"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.study_group.faculty_short</code>.
     */
    public final TableField<StudyGroupRecord, String> FACULTY_SHORT = createField(DSL.name("faculty_short"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.study_group.qualification</code>.
     */
    public final TableField<StudyGroupRecord, String> QUALIFICATION = createField(DSL.name("qualification"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.study_group.schedule_id</code>.
     */
    public final TableField<StudyGroupRecord, Integer> SCHEDULE_ID = createField(DSL.name("schedule_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private StudyGroup(Name alias, Table<StudyGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudyGroup(Name alias, Table<StudyGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.study_group</code> table reference
     */
    public StudyGroup(String alias) {
        this(DSL.name(alias), STUDY_GROUP);
    }

    /**
     * Create an aliased <code>public.study_group</code> table reference
     */
    public StudyGroup(Name alias) {
        this(alias, STUDY_GROUP);
    }

    /**
     * Create a <code>public.study_group</code> table reference
     */
    public StudyGroup() {
        this(DSL.name("study_group"), null);
    }

    public <O extends Record> StudyGroup(Table<O> child, ForeignKey<O, StudyGroupRecord> key) {
        super(child, key, STUDY_GROUP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<StudyGroupRecord, Integer> getIdentity() {
        return (Identity<StudyGroupRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<StudyGroupRecord> getPrimaryKey() {
        return Keys.STUDY_GROUP_PKEY;
    }

    @Override
    public StudyGroup as(String alias) {
        return new StudyGroup(DSL.name(alias), this);
    }

    @Override
    public StudyGroup as(Name alias) {
        return new StudyGroup(alias, this);
    }

    @Override
    public StudyGroup as(Table<?> alias) {
        return new StudyGroup(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StudyGroup rename(String name) {
        return new StudyGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StudyGroup rename(Name name) {
        return new StudyGroup(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StudyGroup rename(Table<?> name) {
        return new StudyGroup(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, Integer, String, String, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
